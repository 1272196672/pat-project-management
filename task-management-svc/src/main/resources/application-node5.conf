akka {
  loglevel = INFO

  log-dead-letters-during-shutdown = off
  log-dead-letters = off

  actor {
    provider = cluster

    allow-java-serialization = true
    serializers {
      java = "akka.serialization.JavaSerializer"
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      #proto = "akka.remote.serialization.ProtobufSerializer"
      #myown = "docs.serialization.MyOwnSerializer"
    }
    serialization-bindings {
      #"java.io.Serializable" = kryo // switch the default serializer to kryo
      "com.pat.task.model.CborSerializable" = jackson-cbor
      "akka.http.scaladsl.model.sse.ServerSentEvent" = jackson-json
    }
  }

  remote {
    log-remote-lifecycle-events = on
    artery {
      canonical {
        hostname = "localhost"
        port = 2552
      }
      advanced {

        # Maximum serialized message size, including header data.
        maximum-frame-size = 10 MiB

        # Direct byte buffers are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-frame-size'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        buffer-pool-size = 128

        # Maximum serialized message size for the large messages, including header data.
        # It is currently restricted to 1/8th the size of a term buffer that can be
        # configured by setting the 'aeron.term.buffer.length' system property.
        # See 'large-message-destinations'.
        maximum-large-frame-size = 16 MiB

        # Direct byte buffers for the large messages are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-large-frame-size'.
        # See 'large-message-destinations'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        large-buffer-pool-size = 32
      }

    }
  }

  cluster {
    seed-nodes = [
      "akka://task-management-svc@localhost:2551",
      "akka://task-management-svc@localhost:2552"
    ]
    sharding.passivate-idle-entity-after = off
  }

  downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

  management {
    http {
      hostname = "localhost"
      port = 8552
      port = ${?akka_management_http_port}
      route-providers-read-only = false
    }
  }

  persistence {
    journal {
      plugin = "akka.persistence.journal.inmem"
      inmem {
        # Class name of the plugin.
        class = "akka.persistence.journal.inmem.InmemJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"

        # Turn this on to test serialization of the events
        test-serialization = on
      }
    }
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = "target/snapshort"
    }
  }

  serialization {
    jackson {
      # The Jackson JSON serializer will register these modules.
      jackson-modules += "akka.serialization.jackson.AkkaJacksonModule"
      # AkkaTypedJacksonModule optionally included if akka-actor-typed is in classpath
      jackson-modules += "akka.serialization.jackson.AkkaTypedJacksonModule"
      # AkkaStreamsModule optionally included if akka-streams is in classpath
      jackson-modules += "akka.serialization.jackson.AkkaStreamJacksonModule"
      jackson-modules += "com.fasterxml.jackson.module.paramnames.ParameterNamesModule"
      jackson-modules += "com.fasterxml.jackson.datatype.jdk8.Jdk8Module"
      jackson-modules += "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"
      jackson-modules += "com.fasterxml.jackson.module.scala.DefaultScalaModule"
    }
  }

  http {
    host = "localhost"
    port = 8422
    staff {
      admin-port = 8440
      project-leader-port = 8441
      product-manager-port = 8442
      developer-port = 8443
      tester-port = 8444
    }
    server {
      preview {
        enable-http2 = on
      }
    }
  }
}

slick {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    host = 192.168.17.130
    url = "jdbc:mysql://"${slick.db.host}":3306/persistdb"
    user = "root"
    password = "123456"
    driver = "com.mysql.cj.jdbc.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

akka-http-cors {
  allow-generic-http-requests = yes
  allow-credentials = yes
  allowed-origins = "*"
  allowed-headers = "*"
  allowed-methods = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"]
}

my-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 32
}